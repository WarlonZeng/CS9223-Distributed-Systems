// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PlatformThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>

#include <boost/make_shared.hpp>

#include <typeinfo>

#include <map>
#include <string>
#include <iostream>
#include <stdexcept>
#include <sstream>
#include <iterator>
#include <algorithm>
#include <utility>
#include <functional>

#include <stdio.h>       // perror, snprintf
#include <stdlib.h>      // exit
#include <unistd.h>      // close, write
#include <string.h>      // strlen
#include <strings.h>     // bzero
#include <time.h>        // time, ctime
#include <sys/socket.h>  // socket, AF_INET, SOCK_STREAM, bind, listen, accept
#include <netinet/in.h>  // servaddr, INADDR_ANY, htons
#include <thread>

#include "KVStore.h"

#define	MAXLINE		4096	// max text line length
#define	BUFFSIZE	8192    // buffer size for reads and writes
#define	LISTENQ		1024	// 2nd argument to listen()
#define PORT_NUM  13002
#define SA struct sockaddr

using namespace apache::thrift;
using namespace apache::thrift::concurrency;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

// using namespace boost::shared_ptr; // boost and std should be linked-in
// using namespace boost; /// bad practice?

//using namespace std; // bad practice?
using namespace kvstore;

// I will use a map for this job. 
std::map<std::string, std::string> shared_kvstore;

class KVStoreHandler : virtual public KVStoreIf {

 public:
  KVStoreHandler() {}


  void kvset(Result& _return, const std::string& key, const std::string& value) {
    // Store the value. This will replace any previous key-value store of same key. 
    // Throw error if could not create key and map value to key.

    try {
      shared_kvstore[key] = value;
      _return.error = ErrorCode::kSuccess;
      _return.value = value;
    }
    catch (...) {
      _return.error = ErrorCode::kError;
      _return.errortext = "Server could not store value";
    }

    printf("kvset\n");
    //cout << key << ": " << shared_kvstore[key] << endl;
  }


  void kvget(Result& _return, const std::string& key) {
    // Retrieve the value associated with the key. 
    // Throw error if key does not exist.

    try {
      _return.value = shared_kvstore[key];
      _return.error = ErrorCode::kSuccess;
    }
    catch (...) {
      _return.error = ErrorCode::kKeyNotFound;
    }

    printf("kvget\n");
    //cout << key << ": " << shared_kvstore[key] << endl;
  }


  void kvdelete(Result& _return, const std::string& key) {
    // Delete key (along with its mapped value). 
    // Throw error if key is not deleted (key does not exist). 

    try {
      shared_kvstore.erase(key);
      _return.error = ErrorCode::kSuccess;
    }
    catch (...) {
      _return.error = ErrorCode::kKeyNotFound;
    }
  
    printf("kvdelete\n");
    //cout << key << ": " << shared_kvstore[key] << endl;
  }

};


// Enable thread pooling (concurrency)
class KVStoreCloneFactory : virtual public KVStoreIfFactory {
 public:
  virtual ~KVStoreCloneFactory() {}
  virtual KVStoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) {
    boost::shared_ptr<TSocket> sock = boost::dynamic_pointer_cast<TSocket>(connInfo.transport);
    std::cout << "Incoming connection\n";
    std::cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
    std::cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
    std::cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
    std::cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
    return new KVStoreHandler;
  }
  virtual void releaseHandler( KVStoreIf* handler) {
    delete handler;
  }
};


int main(int argc, char **argv) {
  int port = 9090;
  TThreadedServer server(
    boost::make_shared<KVStoreProcessorFactory>(boost::make_shared<KVStoreCloneFactory>()),
    boost::make_shared<TServerSocket>(port),
    boost::make_shared<TBufferedTransportFactory>(),
    boost::make_shared<TBinaryProtocolFactory>()
  );

  std::cout << "Starting the server..." << std::endl;
  server.serve();
  std::cout << "Done." << std::endl;
  return 0;

}